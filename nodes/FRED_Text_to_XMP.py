import re

# Expanded English stopword list (can be further customized)
STOPWORDS = {
    "i", "me", "my", "myself", "we", "our", "ours", "ourselves",
    "you", "your", "yours", "yourself", "yourselves",
    "he", "him", "his", "himself", "she", "her", "hers", "herself",
    "it", "its", "itself", "they", "them", "their", "theirs", "themselves",
    "a", "an", "the",
    "is", "are", "was", "were", "be", "been", "being",
    "have", "has", "had", "do", "does", "did",
    "will", "would", "shall", "should", "can", "could", "may", "might", "must",
    "of", "in", "on", "at", "by", "for", "with", "about", "against", "between",
    "into", "through", "during", "before", "after", "above", "below",
    "to", "from", "up", "down", "out", "over", "under",
    "and", "but", "or", "nor", "so", "yet",
    "very", "just", "only", "also", "even", "still", "such", "no", "not",
    "too", "than", "then", "once", "here", "there", "when", "where", "why", "how",
    "this", "that", "these", "those", "all", "any", "both", "each", "few",
    "more", "most", "other", "some", "own", "same",
}

HELP_MESSAGE = """
üëë FRED_Text_to_XMP

üîπ PURPOSE:
Create and attach XMP metadata to your images (or write a sidecar .xmp) from free text or structured fields.
Useful to archive prompts/parameters/keywords in a standard, app-friendly format (Lightroom, Bridge, Photoshop, digiKam, DAMs).

üì• INPUTS:
- image ‚Ä¢ input image to annotate (pass-through if you only want a sidecar)
- xmp_body ‚Ä¢ the text to convert into XMP. Accepts:
  ‚Ä¢ Plain "key = value" lines
  ‚Ä¢ JSON (object) for complex fields
  ‚Ä¢ Namespaced keys (dc:subject, xmp:Rating, photoshop:AuthorsPosition, exif:UserComment, etc.)
- include_prompt / include_negative / include_parameters ‚Ä¢ auto-inject these strings into XMP (if provided upstream)
- keywords ‚Ä¢ comma-separated list ‚Üí stored as dc:subject (Bag)
- creator / title / description / rights ‚Ä¢ common Dublin Core/Photoshop fields
- rating ‚Ä¢ 0‚Äì5 (xmp:Rating)
- write_mode ‚Ä¢ "embed_png", "embed_jpeg", "embed_tiff", "sidecar_only" (what to write and where)
- sidecar_path ‚Ä¢ template/path for .xmp when sidecar_only or when embedding is unavailable
- merge_strategy ‚Ä¢ "merge", "overwrite", "skip" (how to resolve existing XMP in the input)
- pretty_print ‚Ä¢ human-readable XML
- sanitize_xml ‚Ä¢ escape unsafe characters (& < > ") in values
- time_format ‚Ä¢ used for tokens inside paths/fields
- token context ‚Ä¢ optional dict to expand %tokens (model/prompt/seed/etc.)

‚öôÔ∏è KEY OPTIONS:
- Namespaces & mapping:
  ‚Ä¢ dc:title / dc:description / dc:subject (keywords as rdf:Bag)
  ‚Ä¢ xmp:Rating (0‚Äì5), xmp:CreateDate / xmp:MetadataDate (UTC ISO)
  ‚Ä¢ photoshop:AuthorsPosition / photoshop:Headline (optional)
  ‚Ä¢ exif:UserComment for prompt/notes if you want EXIF readers to see it
- Input parsing:
  ‚Ä¢ Line mode: one "key = value" per line ‚Üí trims spaces; empty lines ignored.
  ‚Ä¢ JSON mode: if xmp_body starts with '{', it‚Äôs parsed as JSON (nested objects/arrays allowed).
  ‚Ä¢ Arrays: comma-separated values map to rdf:Bag by default for dc:* fields.
- Auto-fill (if toggled):
  ‚Ä¢ include_prompt ‚Üí writes to exif:UserComment and dc:description
  ‚Ä¢ include_negative ‚Üí appends to dc:description with a "Negative:" section
  ‚Ä¢ include_parameters ‚Üí writes a compact block into xmpMM:History or exif:UserComment
- Tokens in fields and paths:
  ‚Ä¢ %date, %date_dash, %time, %datetime
  ‚Ä¢ %model_name, %seed, %steps, %width, %height, %guidance/%cfg, %denoise, etc.
  ‚Ä¢ %img_count for batches (if provided)
- Embedding vs. sidecar:
  ‚Ä¢ PNG/TIFF: embeds XMP packet in the file (when supported by the format/writer)
  ‚Ä¢ JPEG: embeds standard XMP segment
  ‚Ä¢ Sidecar: writes adjacent .xmp XML file (good for non-destructive, DAM-friendly workflows)
- Safety:
  ‚Ä¢ sanitize_xml prevents malformed XML; long values are preserved (no hard truncation)
  ‚Ä¢ merge_strategy decides how to handle pre-existing XMP in the input image

üì§ OUTPUTS:
- IMAGE ‚Ä¢ pass-through image (unchanged pixels)
- XMP_STRING ‚Ä¢ the final XMP packet text (UTF-8)
- SIDE_CAR_PATH ‚Ä¢ full path to the written .xmp (empty if none)
- help ‚Ä¢ this message

üìù Tips:
- Prefer dc:subject (keywords) for searchability in DAM/Lightroom.
- Keep prompts in exif:UserComment + dc:description; readers vary by app.
- Sidecar only is safest when you don‚Äôt want to modify the original image file.
- Use tokens to stamp model/version/seed for reliable provenance.
"""


class FRED_Text_to_XMP:
    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "text": ("STRING",),
                "sentence_mode": ("BOOLEAN", {"default": False}),
                "replace_space_with_underscore": ("BOOLEAN", {"default": False}),
            },
        }

    RETURN_TYPES = ("STRING", "STRING",)
    RETURN_NAMES = ("XMP_formatted_text", "help",)
    CATEGORY = "üëëFRED/utils"
    FUNCTION = "convert_to_xmp"

    def convert_to_xmp(self, text: str, sentence_mode: bool, replace_space_with_underscore: bool):
        tags = self.extract_tags(text, sentence_mode, replace_space_with_underscore)
        xmp = self.tags_to_xmp(tags)
        return (xmp, HELP_MESSAGE)

    def extract_tags(self, text, sentence_mode, replace_space):
        if sentence_mode:
            # Remove punctuation, split into words, filter stopwords
            words = re.findall(r'\b\w+\b', text.lower())
            tags = [w for w in words if w not in STOPWORDS]
        else:
            # Split by comma, strip spaces
            tags = [t.strip() for t in text.split(",") if t.strip()]
        if replace_space:
            tags = [t.replace(" ", "_") for t in tags]
        return tags

    def tags_to_xmp(self, tags):
        li_elements = "\n".join(f"          <rdf:li>{tag}</rdf:li>" for tag in tags)
        return f"""<?xpacket begin='' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x='adobe:ns:meta/'>
  <rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
    <rdf:Description xmlns:dc='http://purl.org/dc/elements/1.1/'>
      <dc:subject>
        <rdf:Bag>
{li_elements}
        </rdf:Bag>
      </dc:subject>
    </rdf:Description>
  </rdf:RDF>
</x:xmpmeta>
<?xpacket end='w'?>"""

# Node registration for ComfyUI
NODE_CLASS_MAPPINGS = {
    "FRED_Text_to_XMP": FRED_Text_to_XMP
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "FRED_Text_to_XMP": "üëë FRED_Text_to_XMP"
}